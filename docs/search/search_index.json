{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-fleetingviews","title":"Welcome to FleetingViews","text":"<p>FleetingViews is a utility class designed for managing views within Flet applications. It simplifies the process of creating, navigating, and customizing views, similar to how web frameworks manage routes. FleetingViews allows you to define views with specific configurations, keep track of navigation history, and dynamically update view content.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install fleeting-views\n</code></pre>"},{"location":"#upgradation","title":"Upgradation","text":"<pre><code>pip install fleeting-views --upgrade\n</code></pre>"},{"location":"#why-fleetingviews","title":"Why FleetingViews?","text":"<p>FleetingViews was developed to provide a simple solution for managing views in Flet applications. By defining only the views you need and customizing them as required, you can quickly set up and manage your application's user interface.</p>"},{"location":"#repository","title":"Repository","text":""},{"location":"features/","title":"Features","text":""},{"location":"features/#1-automatic-view-creation-with-customized-design","title":"1. Automatic View Creation with Customized Design:","text":"<p>Quickly create views with specified settings, including background colors, alignments, and other attributes.</p>"},{"location":"features/#2-view-history-for-back-calls","title":"2. View History for \"Back\" Calls:","text":"<p>Navigate back to previous views effortlessly, enhancing the user experience.</p>"},{"location":"features/#3-custom-append-methods","title":"3. Custom Append Methods:","text":"<p>Easily add controls to specific views with custom appends methods.</p>"},{"location":"features/#4-clear-method","title":"4. Clear Method:","text":"<p>Reset the view history with a simple clear method.</p>"},{"location":"features/#future","title":"Future","text":""},{"location":"features/#view-change-custom-animations-for-each-view","title":"View Change Custom Animations for Each View","text":""},{"location":"features/#more-customizable-pageupdate-calls-for-page-building-in-the-background","title":"More Customizable page.update() Calls for Page Building in the Background","text":""},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>To install FleetingViews, use the following command: <pre><code>pip install fleetingviews\n</code></pre></p>"},{"location":"getting-started/#import","title":"Import","text":"<pre><code>import FleetingViews as fleetingviews\n</code></pre>"},{"location":"getting-started/#utilization","title":"Utilization","text":"<p>Once you have already installed FleetingViews, all you need to do is define your Views in as the following example:</p> <pre><code>    # View definitions with specific configurations\n    view_definitions = {\n        'home': {\n            'bgcolor': ft.colors.BLUE_GREY,\n            'vertical_alignment': ft.MainAxisAlignment.CENTER,\n            'horizontal_alignment': ft.CrossAxisAlignment.CENTER\n        },\n        'settings': {\n            'bgcolor': ft.colors.AMBER_900,\n            'vertical_alignment': ft.MainAxisAlignment.CENTER,\n            'horizontal_alignment': ft.CrossAxisAlignment.CENTER\n        },\n        'projects': {\n            'bgcolor': ft.colors.BLACK,\n            'vertical_alignment': ft.MainAxisAlignment.CENTER,\n            'horizontal_alignment': ft.CrossAxisAlignment.CENTER\n        }\n    }\n</code></pre>"},{"location":"getting-started/#note","title":"Note","text":"<ul> <li>If a view argument is omitted, it will default to Flet's standard value.</li> <li>You can add your views in any order you prefer, but keep in mind that the first one (\"home\" in the example) will be set as the root view.</li> </ul> <p>Now, with our definitions in hand, just initialize a FleetingViews object as follows:</p> <pre><code>fv = fleetingviews.create_views(view_definitions=view_definitions, page=page)\n</code></pre> <p>You're done!, just 1 line of code.</p> <p>Now, to visit any of your views, just use the method view_go:</p> <pre><code>fv.view_go(\"name_of_view\")\n</code></pre>"},{"location":"getting-started/#adding-controls-to-views","title":"Adding controls to views","text":"<p>FlletingViews currently support 2 ways of adding controls to any view:</p> <ol> <li>You can add controls to any page as follows:</li> </ol> <p><pre><code>fv.append(\"view_name\", controls)\n</code></pre> where controls can either be a single Flet object or a list (use [] if there are multiple controls).</p> <ol> <li>Alternatively, you can use the 'wadd' method:</li> </ol> <pre><code>fv.wadd(controls)\n</code></pre>"},{"location":"getting-started/#note_1","title":"Note","text":"<ul> <li>The wadd method adds those controls to the current working view. By default, this is the last view you declared. Though similar to append, wadd is intended to be less verbose and cleaner.</li> <li>Both methods call page.update() so you don't have to use it in your code.</li> </ul> <p>If you want to change the working view (for all future 'wadd' calls) use:</p> <pre><code>fv.set_working(\"view_name\")\n</code></pre>"}]}